/**@format */

const fs = require("fs");
const path = require("path");

const args = process.argv;
const configuration = require("../i18n/config.json");

const DEFAULT_LANGUAGE = { id: "default", desc: ["默认", "Default"] };
const CHINESE_LANGUAGE = { id: "ch", desc: ["中文", "zh_CN"] };
const ENGLISH_LANGUAGE = { id: "en", desc: ["英文", "en_EN"] };

const _errorBuffer = [];

function getLanguageFromConfig() {
    const globalConfig = require("../res.config.json");
    return globalConfig.language || "";
}

function getLanguage() {
    const source = args[2] || getLanguageFromConfig();
    if (!!!source) return DEFAULT_LANGUAGE;
    switch (source.toLowerCase()) {
        case "chinese":
        case "china":
        case "ch":
        case "cn":
        case "zh":
            return CHINESE_LANGUAGE;
        case "english":
        case "en":
            return ENGLISH_LANGUAGE;
        default:
            return DEFAULT_LANGUAGE;
    }
}

const language = getLanguage();

async function createTargetFile(id, aData, desc) {
    desc = desc || [];

    const aResultLines = [];

    const date = new Date(Date.now());

    aResultLines.push("// #####################################################");
    for (const descItem of desc) aResultLines.push(`// ${descItem}`);
    aResultLines.push("//");
    aResultLines.push(`// 文件创建时间:   ${date.toDateString()}`);
    aResultLines.push(`// 语       言:   ${language.desc[0]}`);
    aResultLines.push(`// 版       权:   aitianyu.cn`);
    aResultLines.push("//");
    aResultLines.push(`// Create Time:  ${date.toDateString()}`);
    aResultLines.push(`// Language   :  ${language.desc[1]}`);
    aResultLines.push(`// Copyright  :  aitianyu.cn`);
    aResultLines.push("//");
    aResultLines.push("// 此文件由天宇自动化生成器生成，请勿手动更改");
    aResultLines.push("// This file is generated by Tianyu Automatic Creater");
    aResultLines.push("// Please do NOT manually change");
    aResultLines.push("//");
    aResultLines.push("// #####################################################");

    const fileMacroDef = `__DTY_COMMON_NATIVE_RES_I18N_${id}_${language.desc[1].toUpperCase()}_H__`;
    aResultLines.push(`#ifndef ${fileMacroDef}`);
    aResultLines.push(`#define ${fileMacroDef}`);
    aResultLines.push("");

    for (const dataItem of aData) {
        const sourceFile = dataItem.source;
        const jsonData = dataItem.data;

        console.log(`Detected source file: ${sourceFile} to ${id}`);

        aResultLines.push(`// ${sourceFile}.json`);

        for (const key of Object.keys(jsonData)) {
            const value = jsonData[key];
            aResultLines.push(`#define ${key} "${value[language.id]}"`);
        }

        aResultLines.push("");
    }

    aResultLines.push(`#endif // !${fileMacroDef}`);

    return aResultLines.join("\r\n");
}

async function generateTarget(id, source, target, desc) {
    let fnResolve = () => {};
    let fnReject = () => {};
    const oGeneratePromise = new Promise((resolve, reject) => {
        fnResolve = resolve;
        fnReject = reject;
    });

    const aFileReadPromise = [];
    for (const sourceFile of source) {
        const filePath = path.resolve(__dirname, "../i18n", `${sourceFile}.json`);
        readFilePromise = new Promise((resolve, reject) => {
            fs.readFile(
                filePath,
                {
                    encoding: "utf-8",
                },
                (err, data) => {
                    if (!!err) {
                        _errorBuffer.push(`read file ${sourceFile} failed. ${err}`);
                        reject();
                    } else {
                        console.log(`Read File :${sourceFile}.json SUCCESS`);
                        resolve({ source: sourceFile, data: JSON.parse(data) });
                    }
                },
            );
        });
        aFileReadPromise.push(readFilePromise);
    }

    Promise.all(aFileReadPromise).then((aData) => {
        const targetPath = path.resolve(__dirname, "../i18n", `${target}.h`);
        try {
            console.log(`Start handle target file :${target}.h`);
            createTargetFile(id, aData, desc).then((result) => {
                console.log(`  handle data for target file :${target}.h SUCCESS`);
                fs.writeFile(
                    targetPath,
                    result,
                    {
                        encoding: "utf-8",
                    },
                    (err) => {
                        if (!!err) {
                            _errorBuffer.push(`fs.writeFile cause an Error ${target}. ${err}`);
                            fnReject();
                        } else {
                            console.log(`Write into file :${target}.h SUCCESS`);
                            fnResolve();
                        }
                    },
                );
            }, fnReject);
        } catch (e) {
            _errorBuffer.push(`write file ${targetPath} failed. ${e.message}`);
        }
    }, fnReject);

    return oGeneratePromise;
}

const aPromises = [];
const targetIds = Object.keys(configuration);
for (const targetId of targetIds) {
    const option = configuration[targetId];
    const source = option.source || [];
    const desc = option.description || [];
    const target = option.target;

    if (!!!targetId || !!!source.length || !!!target) {
        continue;
    }

    const generatePromise = generateTarget(targetId.toUpperCase().replace(" ", "_").replace("-", "_"), source, target, desc);
    aPromises.push(generatePromise);
}

Promise.all(aPromises)
    .then(
        () => {
            console.log("i18n Process Success!!!");
        },
        (err) => {
            console.log("i18n Process Failed!!!");
            _errorBuffer.push(`auto operations failed. ${err}`);
        },
    )
    .finally(() => {
        if (_errorBuffer.length === 0) {
            console.log("Process with 0 error");
        } else {
            console.log(`Process with ${_errorBuffer.length} errors`);
            let index = 1;
            for (const error of _errorBuffer) {
                console.error(`   ${index++}. ${error}`);
            }
        }
    });
