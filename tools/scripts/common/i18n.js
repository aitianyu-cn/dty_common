/**@format */

const fs = require("fs");
const path = require("path");
const basicDefs = require("../utils/define");
const definition = require("../utils/define");

const fileReader = require("../utils/fileReader");

const args = process.argv;
const configuration = require("../../../resource/i18n/config.json");
const globalConfig = require("../../../config/res.config.json");

const I18N_SOURCE_PATH = "../../../resource/i18n";
const I18N_RES_PATH_RELATION = `${basicDefs.TIANYU_NATIVE_NATIVE_RES_PATH}/${basicDefs.TIANYU_NATIVE_NATIVE_RES_I18N_NAME}`;

const DEFAULT_LANGUAGE = { id: "default", desc: ["默认", "Default"] };

let localLanguageDef = null;
const languageMatrix = {};

function buildLanguageMatrix() {
    console.log(`     ** build language matrix **`);

    const defines = globalConfig.language?.defines || {};
    for (const id of Object.keys(defines)) {
        const def = defines[id];
        const idPair = def.def;
        const map = def.map;
        if (!!!idPair || !Array.isArray(map)) {
            continue;
        }

        for (const item of map) {
            languageMatrix[item.toLowerCase()] = idPair;
        }
    }

    console.log(`        current language is ${getLanguage().desc}`);
    console.log();
}

function getLanguageFromConfig(lang) {
    return lang || globalConfig.language?.default || "default";
}

function getLanguage() {
    const source = args[2] || localLanguageDef;
    if (!!!source) {
        return DEFAULT_LANGUAGE;
    }

    return languageMatrix[localLanguageDef] || DEFAULT_LANGUAGE;
}

async function createTargetContent(id, aData, desc) {
    desc = desc || [];

    const aResultLines = [];

    const language = getLanguage();
    const date = new Date(Date.now());

    aResultLines.push("// #####################################################");
    for (const descItem of desc) aResultLines.push(`// ${descItem}`);
    aResultLines.push("//");
    aResultLines.push(`// 文件创建时间:   ${date.toDateString()}`);
    aResultLines.push(`// 语       言:   ${language.desc[0]}`);
    aResultLines.push(`// 版       权:   aitianyu.cn`);
    aResultLines.push("//");
    aResultLines.push(`// Create Time:  ${date.toDateString()}`);
    aResultLines.push(`// Language   :  ${language.desc[1]}`);
    aResultLines.push(`// Copyright  :  aitianyu.cn`);
    aResultLines.push("//");
    aResultLines.push("// 此文件由天宇自动化生成器生成，请勿手动更改");
    aResultLines.push("// This file is generated by Tianyu Automatic Creater");
    aResultLines.push("// Please do NOT manually change");
    aResultLines.push("//");
    aResultLines.push("// #####################################################");

    const fileMacroDef = `__TIANYU_COMMON_NATIVE_RES_I18N_${id}_${language.desc[1].toUpperCase()}_H__`;
    aResultLines.push(`#ifndef ${fileMacroDef}`);
    aResultLines.push(`#define ${fileMacroDef}`);
    aResultLines.push("");

    for (const dataItem of aData) {
        const sourceFile = dataItem.source;
        const jsonData = dataItem.data;

        definition.FULL_CONSOLE_LOG && console.log(`        - detected source file: ${sourceFile} to ${id}`);

        aResultLines.push(`// ${sourceFile}.json`);

        for (const key of Object.keys(jsonData)) {
            const value = jsonData[key];
            const languageValue = value[language.id] || value[DEFAULT_LANGUAGE.id];
            aResultLines.push(`#define ${key} "${languageValue}"`);
        }

        aResultLines.push("");
    }

    aResultLines.push(`#endif // !${fileMacroDef}`);

    return aResultLines.join("\r\n");
}

async function generateTarget(id, source, target, desc) {
    console.log(`     ** start build ${target}.h **`);

    let fnResolve = () => {};
    let fnReject = () => {};
    const oGeneratePromise = new Promise((resolve, reject) => {
        fnResolve = resolve;
        fnReject = reject;
    });

    fileReader.readFiles(source, I18N_SOURCE_PATH).then((aData) => {
        const targetPath = path.resolve(__dirname, I18N_RES_PATH_RELATION, `${target}.h`);
        try {
            console.log(`     ** start handle target file :${target}.h **`);
            createTargetContent(id, aData, desc).then((result) => {
                definition.FULL_CONSOLE_LOG && console.log(`        # handle data for target file :${target}.h SUCCESS`);
                fs.writeFile(
                    targetPath,
                    result,
                    {
                        encoding: "utf-8",
                    },
                    (err) => {
                        if (!!err) {
                            console.error(`        fs.writeFile cause an Error ${target}. ${err}`);
                            fnReject();
                        } else {
                            definition.FULL_CONSOLE_LOG && console.log(`        # write into file :${target}.h SUCCESS`);
                            fnResolve();
                        }

                        console.log(`     ** build ${target}.h end **`);
                    },
                );
            }, fnReject);
        } catch (e) {
            console.error(`     # write file ${targetPath} failed. ${e.message}`);
            console.log(`     ** build ${target}.h end **`);
        }
    }, fnReject);

    return oGeneratePromise;
}

async function run() {
    const aPromises = [];
    const aTargets = [];
    const targetIds = Object.keys(configuration);
    for (const targetId of targetIds) {
        const option = configuration[targetId];
        const source = option.source || [];
        const desc = option.description || [];
        const target = option.target;
        aTargets.push(`${target}.h`);

        if (!!!targetId || !!!source.length || !!!target) {
            continue;
        }

        const generatePromise = generateTarget(targetId.toUpperCase().replace(" ", "_").replace("-", "_"), source, target, desc);
        aPromises.push(generatePromise);
    }

    await Promise.all(aPromises).then(
        () => {
            return new Promise((resolve) => {
                console.log();

                const targetPath = path.resolve(__dirname, I18N_RES_PATH_RELATION, `list.lock.json`);
                console.log(`     build list file`);
                fs.writeFile(targetPath, JSON.stringify(aTargets), { encoding: "utf-8" }, (err) => {
                    if (!!err) {
                        console.error(`     fs.writeFile cause an Error ${target}. ${err}`);
                    } else {
                        console.log("     build list file SUCCESS");
                    }

                    console.log();
                    console.log("     ** i18n process success **");
                    resolve();
                });
            });
        },
        (err) => {
            console.log();
            console.log("     i18n Process Failed!!!");
            console.error(`     auto operations failed. ${err}`);
        },
    );
}

module.exports.build = async function (lang) {
    console.log("  ------ start build i18n resource ------");
    try {
        localLanguageDef = getLanguageFromConfig(lang?.toLowerCase());

        buildLanguageMatrix();

        const nativeResPath = path.resolve(__dirname, basicDefs.TIANYU_NATIVE_NATIVE_RES_PATH);
        if (!fs.existsSync(nativeResPath)) {
            fs.mkdirSync(nativeResPath);
        }

        const nativeResI18nPath = path.resolve(__dirname, I18N_RES_PATH_RELATION);
        if (!fs.existsSync(nativeResI18nPath)) {
            fs.mkdirSync(nativeResI18nPath);
        }

        await run();
    } catch (e) {
        console.error(`     create target failed: ${e.message}`);
    }
    console.log("  ------ build i18n resource end ------");
};
